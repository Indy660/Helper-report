const { Document, Packer, Paragraph, TextRun } = require("docx");
const fs = require("fs");
const path = require("path");
const os = require("os");
const { google } = require("googleapis");

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google API
const auth = new google.auth.GoogleAuth({
    keyFile: "credentials.json",
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
});

const spreadsheetId = "1T4rlAKd7z6-6MFGBGVVHxaUaGaw7rgdiYDsv0eCwxCY";

async function getWeeklyReport(targetDate = null) {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: "v4", auth: client });

    // 1. –î–∞—Ç—ã
    const dateRes = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: "A2:A",
    });
    const dates = dateRes.data.values.map(row => row[0]);

    // 2. –ò–º–µ–Ω–∞
    const namesRes = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: "B1:1",
    });
    const names = namesRes.data.values[0];

    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
    let targetRowIndex;
    if (targetDate) {
        targetRowIndex = dates.findIndex(d => d === targetDate);
    } else {
        const today = new Date();
        const todayStr = today.toLocaleDateString("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
        });
        targetRowIndex = dates.findIndex(d => d === todayStr);
    }

    if (targetRowIndex === -1) {
        throw new Error("–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ");
    }

    const rowNumber = targetRowIndex + 2;

    // 4. –û—Ç—á—ë—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    const dataRes = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: `B${rowNumber}:ZZ${rowNumber}`,
    });
    const reports = dataRes?.data?.values?.[0] || [];

    // 5. –°–∫–ª–µ–∏–≤–∞–µ–º –∏–º—è + –æ—Ç—á—ë—Ç
    const result = names.map((name, i) => ({
        name,
        report: reports[i] || "",
    }));

    const reportDate = dates[targetRowIndex];
    return { result, reportDate };
}

async function createReportDoc(reportData, reportDate) {
    const children = [];

    reportData.forEach(({ name, report }) => {
        // –ò–º—è
        children.push(
            new Paragraph({
                children: [new TextRun({ text: name, size: 28 })], // 14pt
                spacing: { after: 200 },
            })
        );

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"
        children.push(
            new Paragraph({
                children: [new TextRun({ text: "–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", size: 28 })], // 14pt
                spacing: { after: 200 },
            })
        );

        if (report.trim() !== "") {
            // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
            const tasks = report.split(/\r?\n/).map(t => t.trim()).filter(Boolean);
            tasks.forEach(task => {
                children.push(
                    new Paragraph({
                        children: [new TextRun({ text: task, size: 24 })], // 12pt
                        bullet: { level: 0 },
                    })
                );
            });
        } else {
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: "–ù–µ—Ç –æ—Ç—á–µ—Ç–∞", size: 24, italics: true })],
                })
            );
        }

        // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ª—é–¥—å–º–∏ (2 —ç–Ω—Ç–µ—Ä–∞)
        children.push(new Paragraph({ text: "" }));
        children.push(new Paragraph({ text: "" }));
    });

    const doc = new Document({
        sections: [{ properties: {}, children }],
    });

    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const formattedDate = reportDate.replace(/\./g, "_");
    const fileName = `–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ ${formattedDate}.docx`;

    // –ü—É—Ç—å: Desktop/–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
    const desktopPath = path.join(os.homedir(), "Desktop", "–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ");
    if (!fs.existsSync(desktopPath)) {
        fs.mkdirSync(desktopPath, { recursive: true });
    }
    const filePath = path.join(desktopPath, fileName);

    const buffer = await Packer.toBuffer(doc);
    fs.writeFileSync(filePath, buffer);

    console.log(`–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${filePath}`);
}

// üöÄ –ó–∞–ø—É—Å–∫
(async () => {
    try {
        const { result, reportDate } = await getWeeklyReport("11.09.2025"); // –º–æ–∂–Ω–æ null –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        await createReportDoc(result, reportDate);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err.message);
    }
})();
