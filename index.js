const { Document, Packer, Paragraph, TextRun } = require("docx");
const fs = require("fs");
const path = require("path");
const os = require("os");
const { google } = require("googleapis");

require("dotenv").config();

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google API
const auth = new google.auth.GoogleAuth({
    keyFile: "credentials.json",
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
});

const spreadsheetId = "1T4rlAKd7z6-6MFGBGVVHxaUaGaw7rgdiYDsv0eCwxCY";

async function getWeeklyReport(targetDate = null) {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: "v4", auth: client });

    // 1. –î–∞—Ç—ã
    const dateRes = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: "A2:A",
    });
    const dates = dateRes.data.values.map(row => row[0]);

    // 2. –ò–º–µ–Ω–∞
    const namesRes = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: "B1:1",
    });
    const names = namesRes.data.values[0];

    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
    let targetRowIndex;
    if (targetDate) {
        targetRowIndex = dates.findIndex(d => d === targetDate);
    } else {
        const today = new Date();
        const todayStr = today.toLocaleDateString("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
        });
        targetRowIndex = dates.findIndex(d => d === todayStr);
    }

    if (targetRowIndex === -1) {
        throw new Error("–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ");
    }

    const rowNumber = targetRowIndex + 2;

    // 4. –û—Ç—á—ë—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    const dataRes = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: `B${rowNumber}:ZZ${rowNumber}`,
    });
    const reports = dataRes?.data?.values?.[0] || [];

    // 5. –°–∫–ª–µ–∏–≤–∞–µ–º –∏–º—è + –æ—Ç—á—ë—Ç
    const result = names.map((name, i) => ({
        name,
        report: reports[i] || "",
    }));

    const reportDate = dates[targetRowIndex];
    return { result, reportDate };
}

async function createReportDoc(reportData, reportDate) {
    const children = [];

    reportData.forEach(({ name, report }) => {
        // –ò–º—è
        children.push(
            new Paragraph({
                children: [new TextRun({ text: name, size: 28 })], // 14pt
                spacing: { after: 200 },
            })
        );

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"
        children.push(
            new Paragraph({
                children: [new TextRun({ text: "–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", size: 28 })], // 14pt
                spacing: { after: 200 },
            })
        );

        if (report.trim() !== "") {
            // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
            const tasks = report.split(/\r?\n/).map(t => t.trim()).filter(Boolean);
            tasks.forEach(task => {
                children.push(
                    new Paragraph({
                        children: [new TextRun({ text: task, size: 24 })], // 12pt
                        bullet: { level: 0 },
                    })
                );
            });
        } else {
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: "–ù–µ—Ç –æ—Ç—á–µ—Ç–∞", size: 24, italics: true })],
                })
            );
        }

        // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ª—é–¥—å–º–∏ (2 —ç–Ω—Ç–µ—Ä–∞)
        children.push(new Paragraph({ text: "" }));
        children.push(new Paragraph({ text: "" }));
    });

    const doc = new Document({
        sections: [{ properties: {}, children }],
    });

    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileName = `–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ ${reportDate}.docx`;

    // üìÅ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Desktop/–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ/[–¥–∞—Ç–∞]
    const folderName = reportDate; // –Ω–∞–ø—Ä–∏–º–µ—Ä "11.09.2025"
    const desktopPath = path.join(os.homedir(), "Desktop", "–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ", folderName);
    if (!fs.existsSync(desktopPath)) {
        fs.mkdirSync(desktopPath, { recursive: true });
    }
    const filePath = path.join(desktopPath, fileName);

    // –ü—É—Ç—å: Desktop/–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
    const buffer = await Packer.toBuffer(doc);
    fs.writeFileSync(filePath, buffer);

    console.log(`–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${filePath}`);
}

//////////////////////////////////

const OpenAI = require("openai");

const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

async function createAIReport(reportData, reportDate) {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è AI
    let textForAI = `–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ç—á—ë—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é ${reportDate}:\n\n`;
    reportData.forEach(({ name, report }) => {
        textForAI += `${report || "–Ω–µ—Ç –æ—Ç—á—ë—Ç–∞"}\n\n`;
    });

    // –ó–∞–ø—Ä–æ—Å –≤ AI
    const completion = await client.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
            {
                role: "system",
                content: "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫-–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã.",
            },
            {
                role: "user",
                content: `–°–æ—Å—Ç–∞–≤—å –µ–¥–∏–Ω—ã–π "–û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é" –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é" (–∂–∏—Ä–Ω—ã–π, 14pt).
2. –ö—Ä–∞—Ç–∫–æ–µ –≤–≤–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
3. –†–∞–∑–¥–µ–ª "–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏" (–∂–∏—Ä–Ω—ã–π, 14pt), –¥–∞–ª–µ–µ —Å–ø–∏—Å–æ–∫:
   ‚Ä¢ –ø—É–Ω–∫—Ç –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
   o –ø–æ–¥–ø—É–Ω–∫—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
   –ù–µ —É–∫–∞–∑—ã–≤–∞–π –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–µ—Ä–µ—á–∏—Å–ª—è–π —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
4. –†–∞–∑–¥–µ–ª "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" (–∂–∏—Ä–Ω—ã–π, 14pt).
5. –†–∞–∑–¥–µ–ª "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤" (–∂–∏—Ä–Ω—ã–π, 14pt).
6. –†–∞–∑–¥–µ–ª "–í—ã–≤–æ–¥—ã" (–∂–∏—Ä–Ω—ã–π, 14pt) ‚Äî 2‚Äì8 —Ç–µ–∑–∏—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚úÖ.
7. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É:
   "–ü–ª–∞–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è: —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å #. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è–º–∏.

–í–æ—Ç –æ—Ç—á—ë—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n${textForAI}`,
            },
        ],
    });

    const analysis = completion.choices[0].message.content;

    // –§–æ—Ä–º–∏—Ä—É–µ–º Word –¥–æ–∫—É–º–µ–Ω—Ç
    const children = [];
    analysis.split(/\r?\n/).forEach(line => {
        if (!line.trim()) {
            children.push(new Paragraph({ text: "" }));
        } else if (
            line.startsWith("–û–±—â–∏–π –æ—Ç—á–µ—Ç") ||
            line.startsWith("–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏") ||
            line.startsWith("–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö") ||
            line.startsWith("–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤") ||
            line.startsWith("–í—ã–≤–æ–¥—ã")
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî –∂–∏—Ä–Ω—ã–µ, 14pt
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: line.trim(), size: 28, bold: true })],
                    spacing: { after: 200 },
                })
            );
        } else if (line.startsWith("‚Ä¢")) {
            // –ë—É–ª–ª–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: line.replace(/^‚Ä¢\s*/, ""), size: 24 })],
                    bullet: { level: 0 },
                })
            );
        } else if (line.startsWith("o")) {
            // –ü–æ–¥–ø—É–Ω–∫—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: line.replace(/^o\s*/, ""), size: 24 })],
                    bullet: { level: 1 },
                })
            );
        } else if (line.startsWith("‚úÖ")) {
            // –í—ã–≤–æ–¥—ã ‚Äî —á–µ–∫–±–æ–∫—Å
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: line, size: 24 })],
                })
            );
        } else {
            // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            children.push(
                new Paragraph({
                    children: [new TextRun({ text: line, size: 24 })],
                })
            );
        }
    });

    const doc = new Document({
        sections: [{ properties: {}, children }],
    });

    // üìÅ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Desktop/–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ/[–¥–∞—Ç–∞]
    const folderName = reportDate; // –Ω–∞–ø—Ä–∏–º–µ—Ä "11.09.2025"
    const desktopPath = path.join(os.homedir(), "Desktop", "–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ", folderName);
    if (!fs.existsSync(desktopPath)) {
        fs.mkdirSync(desktopPath, { recursive: true });
    }

    const fileName = `–û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ ${reportDate}.docx`;
    const filePath = path.join(desktopPath, fileName);

    const buffer = await Packer.toBuffer(doc);
    fs.writeFileSync(filePath, buffer);

    console.log(`–û–±—â–∏–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${filePath}`);
}

module.exports = { createAIReport };

// üöÄ –ó–∞–ø—É—Å–∫
(async () => {
    try {
        const { result, reportDate } = await getWeeklyReport("11.09.2025"); // –º–æ–∂–Ω–æ null –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        await createReportDoc(result, reportDate);
        await createAIReport(result, reportDate);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err.message);
    }
})();
